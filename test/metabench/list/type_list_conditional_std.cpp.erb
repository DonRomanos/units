#include "type_list_conditional_std.h"

namespace stde = std::experimental;

template<int UniqueValue>
using dim_id = std::integral_constant<int, UniqueValue>;

template<typename D1, typename D2>
using dim_id_less = std::bool_constant<D1::value < D2::value>;


template<typename... Es>
struct dimension;

<% (1..10).each do |k| %>
struct test<%= k %> {

<% (1..n).each do |i| %>
using <%= "dim#{i}" %> = dimension<<%=
    xs = ((1)..(i)).map { |j| "dim_id<#{k*n+i+j}>" }
    rng = Random.new(i)
    xs.shuffle(random: rng).join(', ')
%>>;
#if defined(METABENCH)
using <%= "result#{i}" %> = stde::units::type_list_sort<<%= "dim#{i}" %>, dim_id_less>;
#else
using <%= "result#{i}" %> = void;
#endif
<% end %>

};

<% end %>

int main()
{
}
